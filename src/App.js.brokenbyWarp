/* global __firebase_config, __initial_auth_token */
import React, { useState, useEffect } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, onAuthStateChanged, signInAnonymously, signInWithCustomToken } from 'firebase/auth';
import { getFirestore } from 'firebase/firestore';

// --- Firebase Configuration ---
// These global variables are provided by the environment.
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

// --- Main App Component ---
export default function App() {
  // --- State Management ---
  const [user, setUser] = useState(null);
  const [isInitializing, setIsInitializing] = useState(true);

  // --- Firebase Initialization and Auth Effect ---
  useEffect(() => {
    // Initialize Firebase app and services
    const app = initializeApp(firebaseConfig);
    const authInstance = getAuth(app);
    const dbInstance = getFirestore(app);

const [user, setUser] = useState(null);
const [isInitializing, setIsInitializing] = useState(true);


    // Listener for authentication state changes
    const unsubscribe = onAuthStateChanged(authInstance, async (currentUser) => {
      setIsInitializing(true);
      if (currentUser) {
        setUser(currentUser);
      } else {
        // If no user, try to sign in.
        try {
          if (initialAuthToken) {
            await signInWithCustomToken(authInstance, initialAuthToken);
          } else {
            await signInAnonymously(authInstance);
          }
        } catch (error) {
          console.error("Authentication failed:", error);
        }
      }
      setIsInitializing(false);
    });

    // Cleanup subscription on component unmount
    return () => unsubscribe();
  }, []); // Empty dependency array ensures this runs only once

  // --- Render Logic ---
  const renderContent = () => {
    if (isInitializing) {
      return <LoadingSpinner />;
    }

    if (user) {
      // This is where the main application will go.
      // For now, we'll just show a welcome message and the user's ID.
      return <MainApp user={user} />;
    }

    // This case should ideally not be hit if anonymous sign-in works.
    return (
      <div className="text-center text-red-500">
        Authentication failed. Please refresh the page.
      </div>
    );
  };

  return (
    <div className="bg-slate-50 min-h-screen font-sans text-slate-800 flex flex-col items-center justify-center p-4">
      <div className="w-full max-w-md mx-auto">
        <Header />
        <main className="mt-8 bg-white p-6 rounded-2xl shadow-lg">
          {renderContent()}
        </main>
        <Footer />
      </div>
    </div>
  );
}

// --- UI Components ---

const Header = () => (
  <header className="flex flex-col items-center text-center">
    <div className="flex items-center gap-3">
       <img src="https://i.imgur.com/yvC5nCg.png" alt="SpicyLister Logo" className="w-16 h-16"/>
      <h1 className="text-5xl font-bold text-slate-900 tracking-tight">
        SpicyLister
      </h1>
    </div>
    <p className="mt-2 text-lg text-slate-600">
      Sell Your Clutter without a Stutter.
    </p>
  </header>
);

const LoadingSpinner = () => (
  <div className="flex items-center justify-center p-10">
    <svg className="animate-spin h-8 w-8 text-orange-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>
    <span className="ml-3 text-slate-500">Connecting...</span>
  </div>
);

const MainApp = ({ user }) => (
  <div className="text-center">
    <h2 className="text-2xl font-semibold text-orange-600">Welcome!</h2>
    <p className="mt-2 text-slate-600">
      You are successfully connected. This is the starting point for building out the SpicyLister Pro features.
    </p>
    <div className="mt-4 bg-slate-100 p-3 rounded-lg text-sm text-slate-700 break-all">
      <p className="font-medium">Your User ID:</p>
      <p className="font-mono text-xs mt-1">{user.uid}</p>
    </div>
  </div>
);

const Footer = () => (
    <footer className="text-center mt-8 text-slate-400 text-sm">
        <p>Built by neurospicy, for neurospicy.</p>
    </footer>
);

